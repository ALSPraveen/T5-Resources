		FROM python:3.6
                                                                        myj : 8317c5d9bed24a4bbe8554f301b5e482
RUN pip install flask

COPY . /opt/

EXPOSE 8080

WORKDIR /opt

ENTRYPOINT ["python", "app.py"]


services:
  redis:
    image: redis:alpine
  clickcounter:
    image: kodekloud/click-counter
    ports:
    - 8085:5000
version: '3.0'

docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql
docker run -d -v /opt/data:/var/lib/mysql --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 mysql



----Private Registry

 docker pull nginx:latest 
 docker image tag nginx:latest localhost:5000/nginx:latest and finally push it using 
 docker push localhost:5000/nginx:latest.
We will use the same steps for the second image 
docker pull httpd:latest  
docker image tag httpd:latest localhost:5000/httpd:latest and finally push it using 
docker push localhost:5000/httpd:latest

To check the list of images pushed , use 
curl -X GET localhost:5000/v2/_catalog



Your volume directory is /var/lib/docker/volumes/blog_postgres-data/_data, and /var/lib/docker usually mounted in C:\Users\Public\Documents\Hyper-V\Virtual hard disks. Anyway you can check it out by looking in Docker settings.

You can refer to these docs for info on how to share drives with Docker on Windows.

BTW, Source is the location on the host and Destination is the location inside the container in the following output:

"Mounts": [
{
    "Name": "fac362...80535",
    "Source": "/var/lib/docker/volumes/fac362...80535/_data",
    "Destination": "/webapp",
    "Driver": "local",
    "Mode": "",
    "RW": true,
    "Propagation": ""
}
]
Updated to answer questions in the comment:

My main curiosity here is that sharing images etc is great but how do I share my data?

Actually volume is designed for this purpose (manage data in Docker container). The data in a volume is persisted on the host FS and isolated from the life-cycle of a Docker container/image. You can share your data in a volume by:

Mount Docker volume to host and reuse it

docker run -v /path/on/host:/path/inside/container image

Then all your data will persist in /path/on/host; you could back it up, copy it to another machine, and re-run your container with the same volume.

Create and mount a data container.

Create a data container: docker create -v /dbdata --name dbstore training/postgres /bin/true

Run other containers based on this container using --volumes-from: docker run -d --volumes-from dbstore --name db1 training/postgres, then all data generated by db1 will persist in the volume of container dbstore.

For more information you could refer to the official Docker volumes docs.

Simply speaking, volumes is just a directory on your host with all your container data, so you could use any method you used before to backup/share your data.


version: '3'
services:
  jenkins:
    image: jenkins/jenkins
    privileged: true
    user: root
    ports:
      - 8081:8080
      - 50000:50000
    container_name: jenkins-compose
    volumes:
      - /home/kotesh/koti-jenkins/koti-jenkins-data:/var/jenkins_home
G S Kotesh A6:04 PM
\\wsl$\docker-desktop-data\data\docker\volumes